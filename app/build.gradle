apply plugin: 'com.android.application'
apply plugin: 'com.antfortune.freeline'
//不要加下面这句，会出错：
//java.lang.NoSuchMethodError: com.github.javaparser.ast.CompilationUnit.getTypes()Lcom/github/javaparser/ast/NodeList;
//apply plugin: 'com.jakewharton.butterknife'

//apply from: 'tinker-support.gradle'
//因为使用freeline时会报tinker错误，所以执行assembleRel命令时才引入'tinker-support.gradle'
task myTask {
    List<TaskExecutionRequest> taskRequests = gradle.startParameter.getTaskRequests()
    if (taskRequests.size() > 0) {
        String firstTask = taskRequests.get(0).toString()
        if (firstTask.contains("assembleRel")) {
            apply from: 'tinker-support.gradle'
        }
    }
}

def outputPathName = "${rootDir}/apk"

def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("GMT+08"))
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.example.sqhan.artwork"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //gradle 2.+版本使用，3以上不能使用
    /*applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputPathName)
                def fileName
                if (variant.buildType.name == "release") {
                    fileName = "ArtWork_v${defaultConfig.versionName}_${buildTime()}_release.apk"
                    output.outputFile = new File(outputDirectory, fileName)
                } else if (variant.buildType.name == "debug") {
                    fileName = "ArtWork_v${defaultConfig.versionName}_${buildTime()}_debug.apk"
                    output.outputFile = new File(outputDirectory, fileName)
                }
            }
            //只有打release包时才拷贝release版的R文件
            if ("${variant.baseName}" == "release") {
                copy {
                    def fileNamePrefix = "vbk_v${defaultConfig.versionName}-${variant.baseName}-${buildTime()}"
                    from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                    into outputPathName
                    rename { String fileName1 ->
                        fileName1.replace("R.txt", "${fileNamePrefix}-R.txt")
                    }
                }
            }
        }
    }*/

    //gradle 2.+版本使用，3以上不能使用
    /*applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            if (variant.buildType.name == "release") {
                output.outputFile = new File(file.parent, file.name.replace(".apk", "ArtWork_v${defaultConfig.versionName}_${buildTime()}.apk"))
            } else if (variant.buildType.name == "debug") {
                output.outputFile = new File(file.parent, file.name.replace(".apk", "ArtWork_v${defaultConfig.versionName}_${buildTime()}.apk"))
            }
        }
    }*/
    //不使用这个，在mcd中VBK应用会失败
    //适用于gradle 3.+，现在不在mcd平台了，可以放心使用
    // gradle插件 3.0.0开始无法使用outputFile
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.buildType.name == "release") {
                outputFileName = "ArtWork_v${defaultConfig.versionName}_${buildTime()}.apk"
            } else if (variant.buildType.name == "debug") {
                outputFileName = "ArtWork_v${defaultConfig.versionName}_${buildTime()}.apk"
            }
            //这个虽然重定向，但是是移动了outputs下面的，导致安装时找不到，所以不使用下面这句
//            variant.packageApplication.outputDirectory = new File(outputPathName)
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'junit:junit:4.12'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.facebook.stetho:stetho:1.3.1'
    implementation 'com.android.support:multidex:1.0.3'
    // rxbus使用的是rxjava 1.3.0，应该还不如用eventbus
    implementation 'com.hwangjr.rxbus:rxbus:1.0.6'
    // 多dex配置
    //tinker热修复
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.5'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.8'
//    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
    implementation 'com.tencent.bugly:nativecrashreport:3.3.1'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation project(':kotlinmodule')

    implementation "io.reactivex.rxjava2:rxjava:2.2.1" // Rxjava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0' // rx android
    implementation 'com.squareup.retrofit2:retrofit:2.4.0' //导入retrofit
    implementation 'com.google.code.gson:gson:2.8.0' // Gson 库
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0' // 转换器，请求结果转换成Model
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0' // 配合Rxjava 使用

}

task cleanApk() {
    File file1 = new File(outputPathName)
    if (file1.exists()) {
        file1.deleteDir()
    }
}
clean.dependsOn cleanApk
